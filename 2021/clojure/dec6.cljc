(defn parse-input [string]
  (load-string (str "'(" string ")")))

(defn decrease-day [m]
  (let [new-m (vec (repeat 9 0))
        zero-day (or (get m 0) 0)]
    (-> (reduce (fn [v idx]
                  (assoc v idx (get m (inc idx)
                                    0)))
                new-m
                (range 8))
        (update 6 (partial + zero-day))
        (update 8 (partial + zero-day)))))

(decrease-day {0 4 3 2})

(defn dec6 [string days]
  (let [m (frequencies (parse-input string))]
    (as-> m $
      (iterate decrease-day $)
      (nth $ days)
      (apply + $))))

(dec6 input 256)

(def input "1,1,3,5,1,3,2,1,5,3,1,4,4,4,1,1,1,3,1,4,3,1,2,2,2,4,1,1,5,5,4,3,1,1,1,1,1,1,3,4,1,2,2,5,1,3,5,1,3,2,5,2,2,4,1,1,1,4,3,3,3,1,1,1,1,3,1,3,3,4,4,1,1,5,4,2,2,5,4,5,2,5,1,4,2,1,5,5,5,4,3,1,1,4,1,1,3,1,3,4,1,1,2,4,2,1,1,2,3,1,1,1,4,1,3,5,5,5,5,1,2,2,1,3,1,2,5,1,4,4,5,5,4,1,1,3,3,1,5,1,1,4,1,3,3,2,4,2,4,1,5,5,1,2,5,1,5,4,3,1,1,1,5,4,1,1,4,1,2,3,1,3,5,1,1,1,2,4,5,5,5,4,1,4,1,4,1,1,1,1,1,5,2,1,1,1,1,2,3,1,4,5,5,2,4,1,5,1,3,1,4,1,1,1,4,2,3,2,3,1,5,2,1,1,4,2,1,1,5,1,4,1,1,5,5,4,3,5,1,4,3,4,4,5,1,1,1,2,1,1,2,1,1,3,2,4,5,3,5,1,2,2,2,5,1,2,5,3,5,1,1,4,5,2,1,4,1,5,2,1,1,2,5,4,1,3,5,3,1,1,3,1,4,4,2,2,4,3,1,1")